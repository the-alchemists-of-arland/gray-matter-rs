name: publish
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish'
        required: true
jobs:
  test:
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        rust: [nightly, beta, stable]
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{matrix.rust}}
          profile: minimal
      - name: Run Tests
        run: cargo test
  publish:
    runs-on: ubuntu-20.04
    needs: [test]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.tag != ''
    steps:
      - uses: actions/checkout@v2
      - uses: dtolnay/rust-toolchain@stable
      - name: Check Version Match
        run: |
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          INPUT_VERSION="${{ github.event.inputs.tag }}"
          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Input version: $INPUT_VERSION"
          if [ "$CARGO_VERSION" != "$INPUT_VERSION" ]; then
            echo "Error: Version mismatch!"
            echo "Cargo.toml version ($CARGO_VERSION) does not match input version ($INPUT_VERSION)"
            exit 1
          fi
          echo "Version check passed: $CARGO_VERSION"
      - name: Draft Release
        id: draft_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ github.event.inputs.tag }}',
              name: 'Release v${{ github.event.inputs.tag }}',
              draft: true,
              generate_release_notes: true
            });
            return data.id
      - name: Cargo Login
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
        run: cargo login $CARGO_TOKEN
      - name: Cargo Publish Dry Run
        run: cargo publish --dry-run
      - name: Release
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.draft_release.outputs.result }},
              draft: false
            });
      - name: Cargo Publish
        run: cargo publish
